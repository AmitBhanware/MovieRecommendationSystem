# -*- coding: utf-8 -*-
"""OTTRecomnd.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Q8eVm6sXX-UixnyHDMDJl-OGgE4t6j2X
"""

import pandas as pd
import numpy as np

movies= pd.read_csv('tmdb_5000_movies.csv')
credits= pd.read_csv('tmdb_5000_credits.csv')

credits.head(2)

movies.head(5)

movies.shape

credits.shape

movies=movies.merge(credits, on='title')

movies.shape

movies.head()

movies.head(1)

# genre
# id
# keyword
# title
# overview
# cast
# crew

movies =movies[['movie_id', 'title','overview', 'genres', 'keywords', 'cast', 'crew']]

movies.head()

movies.info()

movies.isnull().sum()

movies.dropna(inplace=True)

movies.duplicated().sum()

movies.iloc[0].genres

# [{"id": 28, "name": "Action"}, {"id": 12, "name": "Adventure"}, {"id": 14, "name": "Fantasy"}, {"id": 878, "name": "Science Fiction"}]'
# [ action, adventure, fantasy, scifi]

import ast
def convert(obj):
    L=[]
    for i in ast.literal_eval(obj):
        L.append(i['name'])
    return L

movies['genres']=movies['genres'].apply(convert)

movies['genres']

movies.head()

movies['keywords']=movies['keywords'].apply(convert)

movies.head()

movies['cast']

import ast
def convert3(obj):
    L=[]
    counter=0
    for i in ast.literal_eval(obj):
        if counter!=3:
            L.append(i['name'])
            counter+=1
        else:
            break
    return L

movies['cast']=movies['cast'].apply(convert3)

movies.head()

movies['crew'][0]

import ast
def fetch_director(obj):
    L=[]
    for i in ast.literal_eval(obj):
        if i['job']=='Director':
            L.append(i['name'])
            break
    return L

movies['crew']=movies['crew'].apply(fetch_director)

movies.head()

movies['overview'][0]

movies['overview']=movies['overview'].apply(lambda x:x.split())

movies.head(1)

movies['overview'][0]

movies.head()

movies['overview']=movies['overview'].apply(lambda x:[i.replace(" ","") for i in x])
movies['keywords']=movies['keywords'].apply(lambda x:[i.replace(" ","") for i in x])
movies['cast']=movies['cast'].apply(lambda x:[i.replace(" ","") for i in x])
movies['crew']=movies['crew'].apply(lambda x:[i.replace(" ","") for i in x])

movies.head()

movies['tags']= movies['overview']+movies['genres']+ movies['keywords'] +movies['cast']+ movies['crew']

movies.head()

movies['tags'][0]

new_df=movies[['movie_id','title','tags']]

new_df

new_df['tags']=new_df['tags'].apply(lambda x:" ".join(x))

new_df.head()

new_df['tags']=new_df['tags'].apply(lambda x:x.lower())

new_df

new_df['tags'][0]

new_df['tags'][1]

from sklearn.feature_extraction.text import CountVectorizer
cv= CountVectorizer(max_features =5000, stop_words='english')

vectors=cv.fit_transform(new_df['tags']).toarray()

vectors[0]

cv.get_feature_names_out()

import nltk
from nltk.stem.porter import PorterStemmer
ps= PorterStemmer()

ps.stem('loving')

def stem(text):
    y=[]
    for i in text.split():
        y.append(ps.stem(i))
    return " ".join(y)

new_df['tags']=new_df['tags'].apply(stem)

new_df

from numpy.linalg import norm
from sklearn.metrics.pairwise import cosine_similarity

similarity= cosine_similarity(vectors)

similarity[2]

similarity[0]

sorted(similarity[0], reverse= True)

list(enumerate(similarity[0]))

def recommend(movie):
    movie_index = new_df[new_df['title']==movie].index[0]
    distances= similarity[movie_index]
    movies_list = sorted(list(enumerate(distances)), reverse= True, key =lambda x: x[1])[1:6]
    for i in movies_list:
        print(new_df.iloc[i[0]].title)

recommend('Avatar')

new_df.iloc[539].title

sorted(list(enumerate(similarity[0])), reverse= True, key =lambda x: x[1])[1:6]

new_df[new_df['title']=='Batman Begins'].index[0]

import pickle

pickle.dump(new_df.to_dict(), open('movie_dict.pkl', 'wb'))

new_df

pickle.dump(similarity, open('similarity.pkl', 'wb'))





































































































